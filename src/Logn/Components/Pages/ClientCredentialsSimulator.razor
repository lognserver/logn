@*
  Copyright (c) 2025 Codefrog
  Business Source License 1.1 – see LICENSE.txt for details.
  Change Date: 2029-07-01   Change License: Apache-2.0
*@
@using PureBlazor.Components
@page "/simulator/client-credentials"
@using Microsoft.Extensions.Options
@rendermode InteractiveServer
<div class="container mx-auto px-4 py-8">
    <h3 class="text-3xl font-bold mb-6 text-gray-700">OIDC Flow Simulation - Client Credentials</h3>
    <p class="text-gray-600 mb-6">
        This tool simulates an OpenID Connect client credentials flow. You can use the default sandbox authority or provide your own.
    </p>
    <FlowConfigPanel Flow="OidcFlow.ClientCredentials"
                     @bind-Authority="Authority"
                     @bind-ClientId="ClientId"
                     @bind-ClientSecret="ClientSecret"/>

    <button class="bg-blue-500 text-white px-4 py-2 rounded"
            @onclick="RequestToken">
        Request Token
    </button>

    @if (TokenResponse is not null)
    {
        <div class="mt-6 bg-green-50 border border-green-200 rounded p-4">
            <h5 class="text-lg font-semibold text-green-800 mb-3">Token Response</h5>

            <div class="grid grid-cols-12 gap-y-2 text-sm">
                <label class="col-span-4 font-medium text-gray-600">Token Type</label>
                <span class="col-span-8 text-gray-800 capitalize">@TokenResponse.TokenType</span>

                <label class="col-span-4 font-medium text-gray-600">Scope</label>
                <span class="col-span-8 text-gray-800 break-words">@TokenResponse.Scope</span>

                <label class="col-span-4 font-medium text-gray-600">Expires</label>
                <span class="col-span-8 text-gray-800">
                    @($"{ExpiresAt}") (@Remaining seconds left)
                </span>

                <label class="col-span-4 font-medium text-gray-600">Access Token</label>
                <span class="col-span-8 break-all">
                    <span class="select-all">@Short(TokenResponse.AccessToken)</span>
                    <button class="ml-2 text-xs text-sky-600 hover:underline"
                            @onclick="() => CopyToClipboard(TokenResponse.AccessToken)">
                        @copyStatus
                    </button>
                </span>

                @if (TokenResponse.IdToken is not null)
                {
                    <label class="col-span-4 font-medium text-gray-600">ID Token</label>
                    <span class="col-span-8 break-all text-gray-800">@Short(TokenResponse.IdToken)</span>
                }
                @if (TokenResponse.RefreshToken is not null)
                {
                    <label class="col-span-4 font-medium text-gray-600">Refresh Token</label>
                    <span class="col-span-8 break-all text-gray-800">@Short(TokenResponse.RefreshToken)</span>
                }
            </div>
        </div>
    }

    @if (OpenIdError is not null)
    {
        <div class="mt-6 bg-red-50 border border-red-200 rounded p-4">
            <h5 class="text-lg font-semibold text-red-800 mb-2">Error</h5>
            <p class="text-red-800 font-semibold">@OpenIdError.Error</p>
            <p class="text-red-700">@OpenIdError.ErrorDescription</p>

            @if (!string.IsNullOrWhiteSpace(OpenIdError.ErrorUri))
            {
                <a href="@OpenIdError.ErrorUri"
                   target="_blank"
                   class="block mt-2 text-sky-600 hover:underline">
                    more details
                </a>
            }
        </div>
    }
</div>

@code {

    [Inject] public required LognClient LognClient { get; set; }

    [Inject] public required NavigationManager NavigationManager { get; set; }
    [Inject] public required IJSRuntime JS { get; set; }

    private enum OidcStep
    {
        ReadyToLogin,
        AuthorizationCodeReceived,
        TokenReceived,
        CallbackComplete
    }

    [Inject] public required IOptions<LognOptions> Options { get; set; }
    [Inject] public required ILogger<ClientCredentialsSimulator> Logger { get; set; }
    
    private OidcStep CurrentStep { get; set; } = OidcStep.ReadyToLogin;
    private string? AuthCode { get; set; }
    private string? AuthToken { get; set; }
    private string? Authority { get; set; }

    private string ClientId { get; set; } = "FakeClientId123";
    private string ClientSecret { get; set; } = "FakeSecret123";
    private OidcErrorResponse? OpenIdError { get; set; }
    private TokenResponse? TokenResponse { get; set; }

    // Use the default authority if none is provided
    private string BaseAuthority => string.IsNullOrWhiteSpace(Authority)
        ? Options.Value.Authority.TrimEnd('/')
        : Authority.TrimEnd('/');

    protected override Task OnInitializedAsync()
    {
        // Check if we're on the "/simulator/callback" route
        var uri = new Uri(NavigationManager.Uri);
        if (uri.AbsolutePath.EndsWith("/simulator/callback", StringComparison.OrdinalIgnoreCase))
        {
            // We likely just returned from the OIDC provider.
            var query = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query);

            // If there's a 'code' in the query, store it and update the flow step.
            if (query.TryGetValue("code", out var codeParam))
            {
                AuthCode = codeParam;
                CurrentStep = OidcStep.AuthorizationCodeReceived;
            }
        }

        return Task.CompletedTask;
    }

    private async Task RequestToken()
    {
        OpenIdError = null;
        TokenResponse = null;
        
        try
        {
            Console.WriteLine($"Requesting token with authority: {BaseAuthority}. ClientId: {ClientId}. ClientSecret: {ClientSecret}. Inputted Authority: {Authority}");
            TokenResponse = await LognClient.RequestTokenAsync(BaseAuthority, new ClientCredentialsTokenRequest(ClientId, ClientSecret));
        }
        catch (OidcException e)
        {
            OpenIdError = e.Error;
        }
        catch (Exception e)
        {
            Logger.LogError(e, "Error requesting token");
            OpenIdError = new OidcErrorResponse
            {
                Error = "server_error",
                ErrorDescription = "An error occurred requesting the token.",
                ErrorUri = null
            };
        }
    }

    private string Short(string token, int keep = 10) =>
        token.Length <= keep * 2 + 3
            ? token
            : $"{token[..keep]}…{token[^keep..]}";

    private string Remaining => TokenResponse is null ? "n/a" :
        (TokenResponse.ExpiresAt - DateTimeOffset.UtcNow).TotalSeconds.ToString("N0");

    private string ExpiresAt => TokenResponse is null ? "n/a" :
        TokenResponse.ExpiresAt.ToString("yyyy-MM-dd HH:mm:ss");

    bool showPopover = false;
    string copyStatus = "Copy";

    async Task CopyToClipboard(string str)
    {
        await JS.InvokeVoidAsync("navigator.clipboard.writeText", str);
        copyStatus = "Copied!";
        StateHasChanged();
        await Task.Delay(1500);
        showPopover = false;
        StateHasChanged();
    }

    void ShowPopover()
    {
        showPopover = true;
        copyStatus = "Copy";
        StateHasChanged();
        // Attach one-time event for click outside
        _ = Task.Run(async () =>
        {
            await Task.Delay(100); // slight delay to avoid instant close
            _ = JS.InvokeVoidAsync("addOneTimeClickOutsideHandler", DotNetObjectReference.Create(this));
        });
    }

    [JSInvokable]
    public void ClosePopover()
    {
        showPopover = false;
        StateHasChanged();
    }

}
